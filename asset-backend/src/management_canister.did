type CanisterStatus = variant { stopped; stopping; running };
type CanisterStatusArgs = record { canister_id : principal };
type CanisterStatusResult = record {
  status : CanisterStatus;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  module_hash : opt vec nat8;
};
type CreateCanisterResult = record { canister_id : principal };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type ManualReply = variant { ok : CanisterStatusArgs; err : text };
type ManualReply_1 = variant { ok : bool; err : text };
type ManualReply_2 = variant { ok : CanisterStatusResult; err : text };
type ManualReply_3 = variant { ok : vec nat8; err : text };
service : () -> {
  execute_create_canister : () -> (ManualReply);
  execute_delete_canister : (principal) -> (ManualReply_1);
  execute_install_code : (principal, vec nat8) -> (ManualReply_1);
  execute_start_canister : (principal) -> (ManualReply_1);
  execute_stop_canister : (principal) -> (ManualReply_1);
  execute_uninstall_code : (principal) -> (ManualReply_1);
  execute_update_settings : (principal) -> (ManualReply_1);
  get_canister_status : (CanisterStatusArgs) -> (ManualReply_2);
  get_created_canister_id : () -> (principal) query;
  get_raw_rand : () -> (ManualReply_3);
  provisional_create_canister_with_cycles : () -> (ManualReply);
  provisional_top_up_canister : (principal, nat) -> (ManualReply_1);
}